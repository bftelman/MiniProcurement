// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniProcurement.Data.Contexts;

#nullable disable

namespace MiniProcurement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231012073606_AddDocs")]
    partial class AddDocs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MiniProcurement.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ManagerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerUserId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.DocumentBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.InvoiceDocument", b =>
                {
                    b.Property<int>("DocumentBaseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentCardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("DocumentBaseId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.PurchaseRequestDocument", b =>
                {
                    b.Property<int>("DocumentBaseId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentBaseId");

                    b.ToTable("PurchaseRequests");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.PurchaseRequestDocumentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemStatus")
                        .HasColumnType("int");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseRequestDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMeasure")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseRequestDocumentId");

                    b.ToTable("PurchaseRequestDocumentItems");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.Department", b =>
                {
                    b.HasOne("MiniProcurement.Data.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.DocumentBase", b =>
                {
                    b.HasOne("MiniProcurement.Data.Entities.User", "CreatedBy")
                        .WithMany("Documents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.InvoiceDocument", b =>
                {
                    b.HasOne("MiniProcurement.Data.Entities.DocumentBase", "DocumentBase")
                        .WithMany("InvoiceRequests")
                        .HasForeignKey("DocumentBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentBase");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.PurchaseRequestDocument", b =>
                {
                    b.HasOne("MiniProcurement.Data.Entities.DocumentBase", "DocumentBase")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("DocumentBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentBase");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.PurchaseRequestDocumentItem", b =>
                {
                    b.HasOne("MiniProcurement.Data.Entities.PurchaseRequestDocument", "PurchaseRequestDocument")
                        .WithMany("PurchaseRequestDocumentItems")
                        .HasForeignKey("PurchaseRequestDocumentId");

                    b.Navigation("PurchaseRequestDocument");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.User", b =>
                {
                    b.HasOne("MiniProcurement.Data.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.UserRole", b =>
                {
                    b.HasOne("MiniProcurement.Data.Entities.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniProcurement.Data.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.DocumentBase", b =>
                {
                    b.Navigation("InvoiceRequests");

                    b.Navigation("PurchaseRequests");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.PurchaseRequestDocument", b =>
                {
                    b.Navigation("PurchaseRequestDocumentItems");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.Role", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MiniProcurement.Data.Entities.User", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
